using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI; // –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ UI Text
using UnityEngine.SceneManagement;

[System.Serializable] // –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ
public class TurnPointInfo
{
    public string description = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"; // –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Ç–∞—Ç—å—Å—è –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ
    public RotateCheck triggerObject; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º –æ–±—ä–µ–∫—Ç-—Ç—Ä–∏–≥–≥–µ—Ä —Ä–∞–∑–≤–∏–ª–∫–∏
    public Transform[] leftWaypoints;
    public int leftPathCost = 1;
    public Transform[] rightWaypoints;
    public int rightPathCost = 1;
}

public class snake : MonoBehaviour
{
    [Header("–û–±—ä–µ–∫—Ç—ã –∏ UI")]
    public GameObject buttonRollDice;
    public Text movesValueText;
    public Text moneyText; // –∏–ª–∏ public TextMeshProUGUI moneyText;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –î–≤–∏–∂–µ–Ω–∏—è")]
    public float stepDistance = 10.0f;
    public float moveDuration = 0.5f;
    public float rotateDuration = 0.3f;
    public float loopMoveDurationPerWaypoint = 0.9f;
    public float loopRotateSpeed = 5f;

    [Header("UI –¥–ª—è –†–∞–∑–≤–∏–ª–∫–∏")]
    public GameObject turnChoiceUI;
    public Button turnLeftButton;
    public Button turnRightButton;
    public GameObject turnMessagePanel; // –ù–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    public Text turnMessageText; // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –†–∞–∑–≤–∏–ª–æ–∫")]
    public List<TurnPointInfo> turnPoints = new List<TurnPointInfo>();

    // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    private RotateCheck currentTurnTrigger;

    [Header("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ü–æ–ª—è –∏ UI –°–æ–±—ã—Ç–∏–π")]
    public float passportFieldXCoordinate = 80.0f;
    public float passportFieldTolerance = 0.5f;
    public GameObject passportUIPanel;
    public GameObject getPassportButtonObject;

    public float stopFieldXCoordinate = 140.0f;
    public float stopFieldTolerance = 0.5f;

    [Header("UI –ü—Ä–æ–≤–µ—Ä–∫–∏ –ü–∞—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –°—Ç–æ–ø-–ü–æ–ª–µ")]
    public GameObject passportCheckPanel;
    public Button presentPassportButton;
    public GameObject passportSuccessPanel;
    public GameObject passportFailPanel;
    public GameObject passportObject;
    public int passportFineAmount = 300;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞")]
    public string cinemaTileTag = "CinemaTile"; // –¢–µ–≥ –¥–ª—è –∫–ª–µ—Ç–∫–∏ "–ö–∏–Ω–æ"
    public int cinemaVisitCost = 50;      // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–∏–Ω–æ
    public float cinemaFieldXCoordinate = 43.21f; // X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏ –∫–∏–Ω–æ
    public float cinemaFieldTolerance = 1.5f;  // –î–æ–ø—É—Å–∫ (–ø–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –∫–ª–µ—Ç–∫–∏ + –Ω–µ–º–Ω–æ–≥–æ)

    public static int money = 5000;
    private int _previousMoneyForUI = -1;
    private bool _cinemaCheckedThisTurn = false;

    private bool isMoving = false;
    private bool waitingForTurnChoice = false;
    private bool isMovingOnLoop = false;
    private int stepsRemainingAfterTurn = 0;
    private Coroutine primaryMoveCoroutine;
    private Coroutine loopMoveCoroutine;
    private int currentDiceSteps = 0;

    private bool passportEventCurrentlyActive = false;
    private bool passportCheckEventActive = false;
    private bool hasStoppedOnStopFieldThisMove = false;
    private bool startedMoveFromSpecialField = false;
    private bool hasAlreadyPresentedPassportOnThisStopField = false;


    private const string PosXKey = "PlayerPositionX_Snake_DokiGorod";
    private const string PosYKey = "PlayerPositionY_Snake_DokiGorod";
    private const string PosZKey = "PlayerPositionZ_Snake_DokiGorod";
    private const string RotYKey = "PlayerRotationY_Snake_DokiGorod";
    private const string DiceRollKey = "LastDiceRoll";
    private const string HasPassportKey = "PlayerHasPassport_DokiGorod";
    private const string MoneyKey = "PlayerMoney_DokiGorod";

    private int stepsTakenInCurrentMove = 0;
    private static bool _sessionHasPassport = false;
    private static bool _sessionPassportStatusInitialized = false;

    private static bool _isFirstLaunch = true;

    [SerializeField] private GameObject hasPassportPanel; // üü¢ –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

    void Awake()
    {
        if (_isFirstLaunch)
        {
            ClearAllSavedData();
            _isFirstLaunch = false;
        }

        InitializePassportStatus();
        LoadMoney();
    }

    void Start()
    {
        gameObject.name = "Player_Snake";
        LoadPlayerState();

        if (PlayerPrefs.HasKey(DiceRollKey))
        {
            int stepsFromDice = PlayerPrefs.GetInt(DiceRollKey);
            if (stepsFromDice > 0) StartMoving(stepsFromDice);
            else { UpdateMovesValueUIText(0); UpdateButtonRollDiceVisibility(); }
        }
        else { UpdateMovesValueUIText(0); UpdateButtonRollDiceVisibility(); }

        if (passportUIPanel != null) passportUIPanel.SetActive(false);
        if (getPassportButtonObject != null)
        {
            getPassportButtonObject.SetActive(false);
            Button btn = getPassportButtonObject.GetComponent<Button>();
            if (btn != null)
            {
                btn.onClick.RemoveAllListeners();
                btn.onClick.AddListener(OnGetPassportButtonClicked);
            }
        }
        if (turnChoiceUI != null) turnChoiceUI.SetActive(false);

        if (turnLeftButton != null) { turnLeftButton.onClick.RemoveAllListeners(); turnLeftButton.onClick.AddListener(() => HandleTurnChoice(true)); }
        if (turnRightButton != null) { turnRightButton.onClick.RemoveAllListeners(); turnRightButton.onClick.AddListener(() => HandleTurnChoice(false)); }

        if (passportCheckPanel != null) passportCheckPanel.SetActive(false);
        if (passportSuccessPanel != null) passportSuccessPanel.SetActive(false);
        if (passportFailPanel != null) passportFailPanel.SetActive(false);
        if (presentPassportButton != null)
        {
            presentPassportButton.onClick.RemoveAllListeners();
            presentPassportButton.onClick.AddListener(OnPresentPassportButtonClicked);
        }

        if (hasPassportPanel != null) hasPassportPanel.SetActive(false);
    }

    void OnApplicationQuit()
    {
        _isFirstLaunch = true;
    }

    private void ClearAllSavedData()
    {
        PlayerPrefs.DeleteKey(PosXKey);
        PlayerPrefs.DeleteKey(PosYKey);
        PlayerPrefs.DeleteKey(PosZKey);
        PlayerPrefs.DeleteKey(RotYKey);
        PlayerPrefs.DeleteKey(DiceRollKey);
        PlayerPrefs.DeleteKey(HasPassportKey);
        PlayerPrefs.DeleteKey(MoneyKey);
        PlayerPrefs.Save();
        Debug.Log("–ù–û–í–´–ô –ó–ê–ü–£–°–ö: –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.");
    }

    private static void InitializePassportStatus()
    {
        if (_sessionPassportStatusInitialized && Application.isPlaying) return;

        if (PlayerPrefs.HasKey(HasPassportKey))
        {
            _sessionHasPassport = (PlayerPrefs.GetInt(HasPassportKey, 0) == 1);
        }
        else
        {
            _sessionHasPassport = false;
        }
        _sessionPassportStatusInitialized = true;
    }

    private bool PlayerEffectivelyHasPassport()
    {
        return _sessionHasPassport;
    }

    void LoadMoney()
    {
        if (PlayerPrefs.HasKey(MoneyKey))
        {
            money = PlayerPrefs.GetInt(MoneyKey);
        }
        else
        {
            money = 5000;
        }
        _previousMoneyForUI = -1;
        UpdateMoneyUI();
    }

    void SaveMoney()
    {
        PlayerPrefs.SetInt(MoneyKey, money);
    }

    void UpdateMoneyUI()
    {
        if (moneyText != null)
        {
            if (money != _previousMoneyForUI)
            {
                moneyText.text = $"–î–æ–∫–æ–≤: {money}";
                _previousMoneyForUI = money;
            }
        }
    }

    void LoadPlayerState()
    {
        if (PlayerPrefs.HasKey(PosXKey))
        {
            transform.position = new Vector3(PlayerPrefs.GetFloat(PosXKey), PlayerPrefs.GetFloat(PosYKey), PlayerPrefs.GetFloat(PosZKey));
            transform.rotation = Quaternion.Euler(0, PlayerPrefs.GetFloat(RotYKey, transform.rotation.eulerAngles.y), 0);
        }
        bool stopFieldActive = CheckAndHandleStopFieldIfNeeded(transform.position, transform.position, true);
        if (!stopFieldActive)
        {
            CheckAndShowPassportPanelIfNeeded(transform.position, transform.position, true);
        }
        UpdateButtonRollDiceVisibility();
    }

    public void SavePlayerState()
    {
        PlayerPrefs.SetFloat(PosXKey, transform.position.x);
        PlayerPrefs.SetFloat(PosYKey, transform.position.y);
        PlayerPrefs.SetFloat(PosZKey, transform.position.z);
        PlayerPrefs.SetFloat(RotYKey, transform.rotation.eulerAngles.y);
        PlayerPrefs.SetInt(HasPassportKey, _sessionHasPassport ? 1 : 0);
        SaveMoney();
        PlayerPrefs.Save();
        Debug.Log($"–°–û–°–¢–û–Ø–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–û (–í–ù–£–¢–†–ò –°–ï–°–°–ò–ò). –ü–æ–∑–∏—Ü–∏—è: {transform.position}");
    }

    // –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–£–ù–ö–¶–ò–Æ STARTMOVING
    public void StartMoving(int steps, bool isContinuationOfEvent = false)
    {
        // --- –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –û–ß–ò–°–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø ---

        if (isMoving || waitingForTurnChoice || isMovingOnLoop)
        {
            Debug.Log("StartMoving –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.");
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ–º –ª–∏ –º—ã —Ö–æ–¥, —Å—Ç–æ—è –Ω–∞ –û–î–ù–û–ú –ò–ó —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        bool isStartingFromStopField = Mathf.Abs(transform.position.x - stopFieldXCoordinate) < stopFieldTolerance;
        // ‚Üì‚Üì‚Üì –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï ‚Üì‚Üì‚Üì
        bool isStartingFromPassportField = Mathf.Abs(transform.position.x - passportFieldXCoordinate) < passportFieldTolerance;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ù–û–í–û–ì–û —Ö–æ–¥–∞.
        hasStoppedOnStopFieldThisMove = false;
        hasAlreadyPresentedPassportOnThisStopField = false;
        _cinemaCheckedThisTurn = false;

        if (passportEventCurrentlyActive)
        {
            HidePassportUIPanel();
        }

        if (passportCheckEventActive)
        {
            HidePassportCheckPanel();
            passportCheckEventActive = false;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç "—É–µ—Ö–∞—Ç—å" —Å –ø–æ–ª—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        startedMoveFromSpecialField = isStartingFromStopField || isStartingFromPassportField || isContinuationOfEvent;

        // --- –ù–ê–ß–ê–õ–û –î–í–ò–ñ–ï–ù–ò–Ø ---

        currentDiceSteps = steps;
        if (PlayerPrefs.HasKey(DiceRollKey)) PlayerPrefs.DeleteKey(DiceRollKey);

        UpdateUIAndButton();
        if (primaryMoveCoroutine != null) StopCoroutine(primaryMoveCoroutine);
        primaryMoveCoroutine = StartCoroutine(MoveStepsCoroutine());
    }

    IEnumerator MoveStepsCoroutine()
    {
        if (isMovingOnLoop) { yield break; }
        isMoving = true;
        UpdateUIAndButton();
        bool skipSpecialFieldChecksDuringFirstSegment = startedMoveFromSpecialField;

        while (currentDiceSteps > 0 && !waitingForTurnChoice && !isMovingOnLoop && !passportCheckEventActive && !passportEventCurrentlyActive)
        {
            Vector3 startPositionOfThisStep = transform.position;
            Vector3 endPositionThisStep = startPositionOfThisStep + transform.forward * stepDistance;
            float elapsedTime = 0;

            while (elapsedTime < moveDuration)
            {
                Vector3 posBeforeLerp = transform.position;
                transform.position = Vector3.Lerp(startPositionOfThisStep, endPositionThisStep, elapsedTime / moveDuration);
                elapsedTime += Time.deltaTime;

                if (!skipSpecialFieldChecksDuringFirstSegment)
                {
                    if (CheckAndHandleStopFieldIfNeeded(posBeforeLerp, transform.position)) { ForceStopMovementSequence("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª–µ–º –°—Ç–æ–ø (–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ö–æ–¥–∞)"); yield break; }
                    if (CheckAndShowPassportPanelIfNeeded(posBeforeLerp, transform.position)) { ForceStopMovementSequence("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª–µ–º 14 –ª–µ—Ç (–≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ö–æ–¥–∞)"); yield break; }
                }
                yield return null;
            }
            transform.position = endPositionThisStep;
            skipSpecialFieldChecksDuringFirstSegment = false;
            startedMoveFromSpecialField = false;

            CheckForCinemaTile();

            currentDiceSteps--;
            stepsTakenInCurrentMove++;
            UpdateMovesValueUIText(currentDiceSteps);

            if (CheckAndHandleStopFieldIfNeeded(startPositionOfThisStep, transform.position, true)) { ForceStopMovementSequence("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–æ–ª–µ –°—Ç–æ–ø (–≤ –∫–æ–Ω—Ü–µ —à–∞–≥–∞)"); yield break; }
            if (CheckAndShowPassportPanelIfNeeded(startPositionOfThisStep, transform.position, true)) { ForceStopMovementSequence("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–æ–ª–µ 14 –ª–µ—Ç (–≤ –∫–æ–Ω—Ü–µ —à–∞–≥–∞)"); yield break; }
        }
        ForceStopMovementSequence("–î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é.");
    }

    void OnMovementFinished()
    {
        isMoving = false;
        isMovingOnLoop = false;
        SavePlayerState();

        // –ï—Å–ª–∏ –±—ã–ª–æ —Å—Ç–æ–ø-–ø–æ–ª–µ, –Ω–æ –ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (hasStoppedOnStopFieldThisMove && !passportCheckEventActive)
        {
            hasStoppedOnStopFieldThisMove = false;
        }

        if (passportCheckEventActive || passportEventCurrentlyActive)
        {
            UpdateUIAndButton();
            return;
        }

        if (CheckAndHandleStopFieldIfNeeded(transform.position, transform.position, true) ||
            CheckAndShowPassportPanelIfNeeded(transform.position, transform.position, true))
        {
            UpdateUIAndButton();
            return;
        }

        if (!_cinemaCheckedThisTurn)
        {
            CheckForCinemaTile();
        }

        if (stepsTakenInCurrentMove == 2 && currentDiceSteps == 0)
        {
            Collider[] hitColliders = Physics.OverlapSphere(transform.position, 0.5f);
            foreach (var collider in hitColliders)
            {
                if (collider.TryGetComponent<Vopros>(out _))
                {
                    PlayerPrefs.SetInt(DiceRollKey, 0);
                    SceneManager.LoadScene("Vopros");
                    return;
                }
            }
        }

        UpdateUIAndButton();
    }

    void CheckForCinemaTile()
    {
        if (_cinemaCheckedThisTurn)
        {
            return;
        }

        if (Mathf.Abs(transform.position.x - cinemaFieldXCoordinate) <= cinemaFieldTolerance)
        {
            Debug.Log($"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–ª–µ—Ç–∫–∞ '–ö–∏–Ω–æ' –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ X={transform.position.x}. –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏.");
            if (money >= cinemaVisitCost)
            {
                money -= cinemaVisitCost;
            }

            _cinemaCheckedThisTurn = true;
            UpdateMoneyUI();
        }
    }

    void ForceStopMovementSequence(string reason)
    {
        if (primaryMoveCoroutine != null) { StopCoroutine(primaryMoveCoroutine); primaryMoveCoroutine = null; }
        if (loopMoveCoroutine != null) { StopCoroutine(loopMoveCoroutine); loopMoveCoroutine = null; }

        isMoving = false;
        isMovingOnLoop = false;

        if (!hasStoppedOnStopFieldThisMove)
        {
            currentDiceSteps = 0;
        }

        startedMoveFromSpecialField = false;

        OnMovementFinished();
    }

    bool CheckAndShowPassportPanelIfNeeded(Vector3 prevPos, Vector3 currentPos, bool isFinalCheckAfterStop = false)
    {
        if (passportCheckEventActive) return false;
        if (passportEventCurrentlyActive && !isFinalCheckAfterStop) return false;

        if (PlayerEffectivelyHasPassport())
        {
            if (passportEventCurrentlyActive) HidePassportUIPanel();
            return false;
        }

        if (passportUIPanel == null) return false;

        bool crossedXPassport = (prevPos.x < passportFieldXCoordinate && currentPos.x >= passportFieldXCoordinate) ||
                                (prevPos.x > passportFieldXCoordinate && currentPos.x <= passportFieldXCoordinate);
        bool atXPassportCoordinate = Mathf.Abs(currentPos.x - passportFieldXCoordinate) < passportFieldTolerance;

        if ((isFinalCheckAfterStop && atXPassportCoordinate) || (!isFinalCheckAfterStop && (crossedXPassport || atXPassportCoordinate)))
        {
            if (!passportEventCurrentlyActive)
            {
                ShowPassportUIPanel();
            }
            return true;
        }
        return false;
    }

    void ShowPassportUIPanel()
    {
        if (passportUIPanel != null)
        {
            passportUIPanel.SetActive(true);
            if (getPassportButtonObject != null) getPassportButtonObject.SetActive(true);
            passportEventCurrentlyActive = true;
            UpdateButtonRollDiceVisibility();
        }
    }

    void HidePassportUIPanel()
    {
        if (passportUIPanel != null && passportEventCurrentlyActive)
        {
            passportUIPanel.SetActive(false);
            if (getPassportButtonObject != null) getPassportButtonObject.SetActive(false);
            passportEventCurrentlyActive = false;
            UpdateButtonRollDiceVisibility();
        }
    }

    public void OnGetPassportButtonClicked()
    {
        _sessionHasPassport = true;
         PlayerPrefs.SetInt(HasPassportKey, 1); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PlayerPrefs
        PlayerPrefs.Save();
        if (passportObject != null) passportObject.SetActive(true);
        HidePassportUIPanel();
        OnMovementFinished();
    }

    bool CheckAndHandleStopFieldIfNeeded(Vector3 prevPos, Vector3 currentPos, bool isFinalCheck = false)
    {
        if (passportEventCurrentlyActive && !isFinalCheck)
            return false;
        if (passportCheckEventActive && !isFinalCheck)
            return false;

        // ‚úÖ –ù–ï –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–µ–¥—ä—è–≤–∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç —Ä–∞–Ω–µ–µ
        if (hasAlreadyPresentedPassportOnThisStopField)
            return false;

        bool crossedXStop = (prevPos.x < stopFieldXCoordinate && currentPos.x >= stopFieldXCoordinate) ||
                            (prevPos.x > stopFieldXCoordinate && currentPos.x <= stopFieldXCoordinate);
        bool atXStopCoordinate = Mathf.Abs(currentPos.x - stopFieldXCoordinate) < stopFieldTolerance;

        if ((isFinalCheck && atXStopCoordinate) || (!isFinalCheck && (crossedXStop || atXStopCoordinate)))
        {
            if (!hasStoppedOnStopFieldThisMove)
            {
                transform.position = new Vector3(stopFieldXCoordinate, currentPos.y, currentPos.z);
                hasStoppedOnStopFieldThisMove = true;
                if (!passportCheckEventActive) ShowPassportCheckPanel();
                return true;
            }
            
        }
        return false;
    }

    void ShowPassportCheckPanel()
    {
        if (passportCheckPanel != null)
        {
            passportCheckPanel.SetActive(true);
            if (presentPassportButton != null) presentPassportButton.gameObject.SetActive(true);
            passportCheckEventActive = true;
            UpdateButtonRollDiceVisibility();
        }
    }

    void HidePassportCheckPanel()
    {
        if (passportCheckPanel != null)
        {
            passportCheckPanel.SetActive(false);

            if (presentPassportButton != null)
                presentPassportButton.gameObject.SetActive(false);
        }
    }

    private void HideAllPassportCheckUI()
    {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã–≤–∞–µ—Ç –í–°–Å, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Å–ø–æ—Ä—Ç–∞.
        if (passportCheckPanel != null)
        {
            passportCheckPanel.SetActive(false);
        }
        if (presentPassportButton != null)
        {
            presentPassportButton.gameObject.SetActive(false);
        }
    }

    public void OnPresentPassportButtonClicked()
    {
        // --- –í–ï–¢–ö–ê 1: –£ –ò–ì–†–û–ö–ê –ï–°–¢–¨ –ü–ê–°–ü–û–†–¢ (–£–°–ü–ï–•) ---
        if (PlayerEffectivelyHasPassport())
        {
            // === –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===

            // 1. –ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–µ–≥–æ "—á–∏—Å—Ç–∏–ª—å—â–∏–∫–∞". –û–Ω —Å–∫—Ä–æ–µ—Ç –∏ –ø–∞–Ω–µ–ª—å, –∏ –∫–Ω–æ–ø–∫—É.
            HideAllPassportCheckUI();

            // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
            if (passportSuccessPanel != null)
            {
                passportSuccessPanel.SetActive(true);
            }

            // === –û–¢–õ–û–ñ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
            StartCoroutine(HidePanelAfterDelay(passportSuccessPanel, 1.5f, () =>
            {
                int remainingSteps = currentDiceSteps;

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –∑–Ω–∞–ª–∞, —á—Ç–æ –º—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –Ω–µ–º.
                passportCheckEventActive = false;

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–ø–∞–º—è—Ç–∏", —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –ø–æ–ª–µ —Å–Ω–æ–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ –∂–µ —Ö–æ–¥–∞.
                hasAlreadyPresentedPassportOnThisStopField = true;

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ö–æ–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ö–∏–Ω—å –∫—É–±–∏–∫".
                UpdateUIAndButton();

                // –ï—Å–ª–∏ –±—ã–ª–∏ —à–∞–≥–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Å —Ñ–ª–∞–≥–æ–º "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ".
                if (remainingSteps > 0)
                {
                    StartMoving(remainingSteps, true);
                }
            }));
        }
        else // –í–µ—Ç–∫–∞, –µ—Å–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ –ù–ï–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
        {
            if (passportFailPanel != null)
                passportFailPanel.SetActive(true);

            StartCoroutine(HidePanelAfterDelay(passportFailPanel, 2f, () => {
                StartCoroutine(MovePlayerBackThreeFieldsCoroutine(() => {

                    // --- –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –°–ë–†–û–°–ê –ò –ê–ö–¢–ò–í–ê–¶–ò–ò ---

                    // 1. –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º UI —Å—Ç–æ–ø-–ø–æ–ª—è.
                    HidePassportCheckPanel();

                    // 2. –Ø–í–ù–û –∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞".
                    // –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ.
                    passportCheckEventActive = false;

                    // 3. –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ –≤ —á–∏—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞.
                    ShowPassportUIPanel();

                    // 4. –û–±–Ω–æ–≤–ª—è–µ–º UI, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ö–∏–Ω—å –∫—É–±–∏–∫" –∏—Å—á–µ–∑–ª–∞,
                    // —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞.
                    UpdateButtonRollDiceVisibility();

                }));
            }));
        }
    }

    IEnumerator MovePlayerBackThreeFieldsCoroutine(System.Action onComplete)
    {
        isMoving = true;
        Vector3 targetPosition = transform.position - transform.forward * (stepDistance * 3);
        targetPosition.x = Mathf.Max(0, targetPosition.x);
        float elapsedTime = 0;
        Vector3 startPos = transform.position;
        float totalMoveDuration = moveDuration * 1.5f;
        while (elapsedTime < totalMoveDuration)
        {
            transform.position = Vector3.Lerp(startPos, targetPosition, elapsedTime / totalMoveDuration);
            elapsedTime += Time.deltaTime;
            yield return null;
        }
        transform.position = targetPosition;
        isMoving = false;

        Debug.Log($"–®—Ç—Ä–∞—Ñ! –°–ø–∏—Å–∞–Ω–æ {passportFineAmount} –¥–æ–∫–æ–≤ –∑–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞.");
        money -= passportFineAmount;
        UpdateMoneyUI();

        onComplete?.Invoke();
    }

    IEnumerator HidePanelAfterDelay(GameObject panel, float delay, System.Action onComplete = null)
    {
        yield return new WaitForSeconds(delay);
        if (panel != null) panel.SetActive(false);

        UpdateUIAndButton(); // <== –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        onComplete?.Invoke();
    }

    public void ReachedTurnPoint(RotateCheck trigger)
    {
        if (waitingForTurnChoice) return;
        if (passportEventCurrentlyActive || passportCheckEventActive) return;

        if (primaryMoveCoroutine != null) StopCoroutine(primaryMoveCoroutine);
        if (loopMoveCoroutine != null) StopCoroutine(loopMoveCoroutine);
        isMoving = false; isMovingOnLoop = false;

        waitingForTurnChoice = true;
        currentTurnTrigger = trigger; // <-- –ó–ê–ü–û–ú–ò–ù–ê–ï–ú, –ö–ê–ö–ê–Ø –†–ê–ó–í–ò–õ–ö–ê –ê–ö–¢–ò–í–ù–ê
        stepsRemainingAfterTurn = currentDiceSteps;


        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–∏–ª–∫–æ–π --> —Ç—É—Ç –¥–æ–±–∞–≤–∏–ª–∞ 
        if (turnMessagePanel != null)
        {
            turnMessagePanel.SetActive(true);
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ –∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
            if (turnMessageText != null)
            {
                turnMessageText.text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:";
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏
            StartCoroutine(ShowTurnButtonsAfterDelay(2f));
        }
        else
        {
            // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            if (turnChoiceUI != null) turnChoiceUI.SetActive(true);
        }


        UpdateUIAndButton();
    }
    
    IEnumerator ShowTurnButtonsAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if (turnMessagePanel != null)
        {
            turnMessagePanel.SetActive(false);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (turnChoiceUI != null)
        {
            turnChoiceUI.SetActive(true);
        }
    }

    public void HandleTurnChoice(bool turnLeft)
    {
        if (!waitingForTurnChoice || currentTurnTrigger == null) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—â–µ –≤–∏–¥–Ω–∞) --—Ç—É—Ç —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏–ª–∞ 
        if (turnMessagePanel != null)
        {
            turnMessagePanel.SetActive(false);
        }

        // –ò—â–µ–º –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç—Ä–∏–≥–≥–µ—Ä—É
        TurnPointInfo currentPoint = turnPoints.Find(p => p.triggerObject == currentTurnTrigger);

        if (currentPoint == null)
        {
            Debug.LogError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–∞–∑–≤–∏–ª–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä.");
            // –û—Ç–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å
            waitingForTurnChoice = false;
            if (turnChoiceUI != null) turnChoiceUI.SetActive(false);
            OnMovementFinished();
            return;
        }

        if (turnChoiceUI != null) turnChoiceUI.SetActive(false);
        waitingForTurnChoice = false;
        currentDiceSteps = stepsRemainingAfterTurn;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ä–∞–∑–≤–∏–ª–∫–∏
        Transform[] targetLoopWaypoints = turnLeft ? currentPoint.leftWaypoints : currentPoint.rightWaypoints;
        int loopCost = turnLeft ? currentPoint.leftPathCost : currentPoint.rightPathCost;

        if (targetLoopWaypoints != null && targetLoopWaypoints.Length > 0)
        {
            if (currentDiceSteps >= loopCost)
            {
                isMovingOnLoop = true;
                if (loopMoveCoroutine != null) StopCoroutine(loopMoveCoroutine);
                loopMoveCoroutine = StartCoroutine(MoveAlongLoopCoroutine(targetLoopWaypoints, loopCost));
            }
            else
            {
                currentDiceSteps = 0;
                OnMovementFinished();
            }
        }
        else // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–π —Ä–∞–∑–≤–∏–ª–∫–∏ –ø—É—Ç–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–≤–æ—Ä–æ—Ç
        {
            isMoving = true;
            float rotationYAmount = turnLeft ? -90f : 90f;
            if (primaryMoveCoroutine != null) StopCoroutine(primaryMoveCoroutine);
            primaryMoveCoroutine = StartCoroutine(RotateCoroutine(rotationYAmount, () =>
            {
                if (currentDiceSteps > 0)
                {
                    StartMoving(currentDiceSteps);
                }
                else
                {
                    OnMovementFinished();
                }
            }));
        }
        UpdateUIAndButton();
    }

    IEnumerator MoveAlongLoopCoroutine(Transform[] waypoints, int costOfLoop)
    {
        isMovingOnLoop = true; isMoving = true; UpdateUIAndButton();
        if (waypoints.Length > 0) yield return StartCoroutine(RotateTowardsTargetCoroutine(waypoints[0].position));

        for (int i = 0; i < waypoints.Length; i++)
        {
            Vector3 startPositionOfThisStep = transform.position;
            Vector3 endPositionThisStep = waypoints[i].position;
            float elapsedTime = 0;

            while (elapsedTime < loopMoveDurationPerWaypoint)
            {
                Vector3 posBeforeLerp = transform.position;
                transform.position = Vector3.Lerp(startPositionOfThisStep, endPositionThisStep, elapsedTime / loopMoveDurationPerWaypoint);
                if (i + 1 < waypoints.Length) RotateTowardsTargetDuringMovement(waypoints[i + 1].position);
                else RotateTowardsTargetDuringMovement(endPositionThisStep + waypoints[i].forward);
                elapsedTime += Time.deltaTime;

                if (CheckAndHandleStopFieldIfNeeded(posBeforeLerp, transform.position)) { ForceStopMovementSequence("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª–µ–º –°–¢–û–ü (—Å–µ—Ä–µ–¥–∏–Ω–∞ –ø–µ—Ç–ª–∏)"); yield break; }
                if (CheckAndShowPassportPanelIfNeeded(posBeforeLerp, transform.position)) { ForceStopMovementSequence("–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª–µ–º –ø–∞—Å–ø–æ—Ä—Ç–∞ 14 –ª–µ—Ç (—Å–µ—Ä–µ–¥–∏–Ω–∞ –ø–µ—Ç–ª–∏)"); yield break; }

                yield return null;
            }
            transform.position = endPositionThisStep;

            CheckForCinemaTile();
            if (CheckAndHandleStopFieldIfNeeded(transform.position, transform.position, true)) { ForceStopMovementSequence("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–æ–ª–µ –°–¢–û–ü (–∫–æ–Ω–µ—Ü —Ç–æ—á–∫–∏ –ø—É—Ç–∏ –ø–µ—Ç–ª–∏)"); yield break; }
            if (CheckAndShowPassportPanelIfNeeded(transform.position, transform.position, true)) { ForceStopMovementSequence("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–æ–ª–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ 14 –ª–µ—Ç (–∫–æ–Ω–µ—Ü —Ç–æ—á–∫–∏ –ø—É—Ç–∏ –ø–µ—Ç–ª–∏)"); yield break; }
        }

        currentDiceSteps -= costOfLoop; UpdateMovesValueUIText(currentDiceSteps);
        if (waypoints.Length > 0) transform.rotation = waypoints[waypoints.Length - 1].rotation;

        isMovingOnLoop = false; isMoving = false;

        if (currentDiceSteps > 0) { StartMoving(currentDiceSteps); }
        else OnMovementFinished();
    }

    IEnumerator RotateCoroutine(float angleY, System.Action onRotationComplete)
    {
        Quaternion startRot = transform.rotation;
        Quaternion endRot = startRot * Quaternion.Euler(0, angleY, 0);
        float elapsedTime = 0;
        while (elapsedTime < rotateDuration) { transform.rotation = Quaternion.Slerp(startRot, endRot, elapsedTime / rotateDuration); elapsedTime += Time.deltaTime; yield return null; }
        transform.rotation = endRot;
        onRotationComplete?.Invoke();
    }

    IEnumerator RotateTowardsTargetCoroutine(Vector3 targetPosition)
    {
        Vector3 direction = (targetPosition - transform.position).normalized;
        if (direction == Vector3.zero) { yield break; }
        Quaternion targetRotation = Quaternion.LookRotation(direction);
        float elapsedTime = 0;
        Quaternion startRotation = transform.rotation;
        while (elapsedTime < rotateDuration) { transform.rotation = Quaternion.Slerp(startRotation, targetRotation, elapsedTime / rotateDuration); elapsedTime += Time.deltaTime; yield return null; }
        transform.rotation = targetRotation;
    }

    void RotateTowardsTargetDuringMovement(Vector3 targetPosition)
    {
        Vector3 direction = (targetPosition - transform.position).normalized;
        if (direction != Vector3.zero) transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(direction), Time.deltaTime * loopRotateSpeed);
    }

    void UpdateUIAndButton()
    {
        UpdateMovesValueUIText(currentDiceSteps);
        UpdateButtonRollDiceVisibility();
        UpdateMoneyUI();
    }

    void UpdateMovesValueUIText(int moves)
    {
        if (movesValueText != null) movesValueText.text = moves.ToString();
    }

    void UpdateButtonRollDiceVisibility()
    {
        if (buttonRollDice != null)
        {

            bool canRoll = !(isMoving || waitingForTurnChoice || isMovingOnLoop || passportCheckEventActive) && currentDiceSteps <= 0;
            buttonRollDice.SetActive(canRoll);
        }
    }

    public bool IsCurrentlyExecutingMovement()
    {
        return isMoving || waitingForTurnChoice || isMovingOnLoop || passportCheckEventActive || passportEventCurrentlyActive;
    }



    
}